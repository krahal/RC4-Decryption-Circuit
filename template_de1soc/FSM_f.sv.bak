module FSM_f (
input logic clk,
input logic [7:0] q_RAM1,

output logic [7:0] address_out_RAM1,
output logic [7:0] data_to_RAM1,
output logic wren_to_RAM1,
);

// General
logic [2:0] state;
logic [23:0] secret_key;

// Task 1c
parameter [2:0] idle 		= 3'b000;
parameter [2:0] write 		= 3'b101;
parameter [2:0] increment  = 3'b001;
parameter [2:0] pfinish		= 3'b100;
parameter [2:0] finish_1c 	= 3'b011; 

// Task 2a
parameter [4:0] IDLE_2a		= 5'b00000; 	// Wait for task2a_start (FSM1c done signal)
parameter [4:0] GET_SI	 	= 5'b00001;		// Send request for s[i]
parameter [4:0] WAIT1  	   = 5'b00010;		
parameter [4:0] WAIT2		= 5'b00011;	
parameter [4:0] CALC		   = 5'b00100;		// Calculate J using J, s[i], and case statement for mod <save s[i]>
parameter [4:0] GET_SJ		= 5'b00101;		// Send request for s[j]
parameter [4:0] WAIT3		= 5'b00110;
parameter [4:0] WAIT4		= 5'b00111;
parameter [4:0] SAVE_JS		= 5'b01000;		// Save s[j] for future swap 
parameter [4:0] SWAP_JI		= 5'b01001;		// Swap - write s[i] into address J 
parameter [4:0] WAIT5		= 5'b01010;
parameter [4:0] WAIT6		= 5'b01011;
parameter [4:0] WAITx		= 5'b10001;
parameter [4:0] SWAP_IJ		= 5'b01100; 	// Swap - write s[j] (variable saved) into i
parameter [4:0] WAIT7		= 5'b01101;
parameter [4:0] WAIT8		= 5'b01110;
parameter [4:0] WAITy		= 5'b10010;
parameter [4:0] INC			= 5'b01111;		// Increment counter
parameter [4:0] FINISH_2a	= 5'b10000;

// Task 1c
logic [7:0] counter; // 255 = 1111_1111

// Task 2a
logic [2:0] key_mod;		// Variable for mod
logic [7:0] j_index;		// j index value	
logic [7:0] saved_si;	// Saving value of s[i]
logic [7:0] saved_sj; 	// Saving value of s[j]
logic [8:0] i_index; 	// 255 = 0_1111_1111 also i (this was counter before)

always_ff @(posedge clk)
	begin
	 case (state) 
	 idle:		begin
						state <= write;
						counter <= 8'b0000_0000;
						data_to_RAM1 <= 8'b0000_0000;
						address_out_RAM1 <= 8'b0000_0000;
						wren_to_RAM1 <= 1'b0;
					end
	 write:		if (counter == 8'b1111_1111) begin
						state <= pfinish;
						data_to_RAM1 <= counter;
						address_out_RAM1 <= counter;
						wren_to_RAM1 <= 1'b1;
					end
					else begin
						state <= increment;
						data_to_RAM1 <= counter;
						address_out_RAM1 <= counter;
						wren_to_RAM1 <= 1'b1;
					end
	 increment: begin
						counter <= counter + 1;
						state <= write;
						wren_to_RAM1 <= 1'b0;
					end
	 pfinish:	state <= finish;
	 finish_1c:	begin
						state <= IDLE_2a;
						data_to_RAM1 <= 8'b0000_0000;
						address_out_RAM1 <= 8'b0000_0000;
						wren_to_RAM1 <= 1'b0;
					end

//////////////////////////////////////////////////////////////////////					
					
	IDLE_2a:		begin
					state <= GET_SI;
					i_index <= 9'b0_0000_0000;
					j_index <= 8'b0000_0000;
					
					data_to_RAM1 <= 8'b0000_0000;
					address_out_RAM1 <= 8'b0000_0000;
					wren_to_RAM1 <= 1'b0;
					end
	 
	 GET_SI:		if (i_index >= 9'b1_0000_0000) begin
					state <= FINISH;
					end 
					else begin
					state <= WAIT1;
					
					data_to_RAM1 <= 8'b0000_0000;
					address_out_RAM1 <= i_index[7:0];
					wren_to_RAM1 <= 1'b0;
					end
	 
	 WAIT1:		state <= WAIT2;
	 
	 WAIT2:		begin
					state <= CALC;
					key_mod <= (i_index[7:0])%3;
					end
	 
	 CALC: 		begin
					if (key_mod == 0) begin
								j_index <= (j_index + q_RAM1 + scrt_key[23:16]);
								state <= GET_SJ;
								saved_si <= q_RAM1;
								end
					else if (key_mod == 1) begin
								j_index <= (j_index + q_RAM1 + scrt_key[15:8]);
								state <= GET_SJ;
								saved_si <= q_RAM1;
								end
					else begin
								j_index <= (j_index + q_RAM1 + scrt_key[7:0]);
								state <= GET_SJ;
								saved_si <= q_RAM1;
								end
					end
					
	 GET_SJ:		begin
					state <= WAIT3;
					data_to_RAM <= 8'b0000_0000;
					address_out_RAM1 <= j_index;
					wren_to_RAM <= 1'b0;
					end
					
	 WAIT3:		state <= WAIT4;
	 
	 WAIT4:		state <= SAVE_JS;
	 
	 SAVE_JS:	begin
					state <= SWAP_JI;
					saved_sj <= q_RAM1;
					end
					
	 SWAP_JI:	begin
					state <= WAIT5;
					address_out_RAM1 <= i_index;
					data_to_RAM1 <= saved_sj;
					wren_to_RAM1 <= 1'b1;
					end
					
	 WAIT5:		state <= WAIT6;
	 
	 WAIT6:		state <= WAITx;
	 
	 WAITx:		state <= SWAP_IJ;
	 
	 SWAP_IJ:	begin
					state <= WAIT7;
					address_out_RAM1 <= j_index;
					data_to_RAM1 <= saved_si;
					wren_to_RAM <= 1'b1;
					end
	 
	 WAIT7:		state <= WAIT8;
	 
	 WAIT8:		state <= WAITy;
	 
	 WAITy:		state <= INC;
	 
	 INC: 		begin
					state <= GET_SI;
					i_index <= i_index + 1;
					end
	 
	 FINISH_2a:	begin
					if (master_reset == 1'b0) begin
					state <= FINISH;
					data_to_RAM1 <= 8'b0000_0000;
					address_out_RAM1 <= 8'b0000_0000;
					wren_to_RAM1 <= 1'b0;
					end
					
	 default:	begin
						state <= idle;
						counter <= 8'b0000_0000;
						data_to_RAM1 <= 8'b0000_0000;
						address_out_RAM1 <= 8'b0000_0000;
						wren_to_RAM1 <= 1'b0;
			
						secret_key <= 24'b0000_0000_0000_0000_0000_0000;
						
					end
	endcase
	end
endmodule

);
